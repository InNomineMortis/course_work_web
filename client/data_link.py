from random import random
from typing import Tuple, Dict


def xor_div(num: int, div: int) -> int:
    copy_div = div
    num_len = num.bit_length()
    div_len = copy_div.bit_length()
    rem = num

    if num_len > div_len:
        copy_div <<= num_len - div_len

    for i in range(num_len - div_len + 1):
        rem ^= copy_div
        delta = copy_div.bit_length() - rem.bit_length()
        copy_div >>= delta

        if rem.bit_length() < div_len:
            break

    return rem


def calc_err_map(n: int, k: int, gx: int) -> Tuple[Dict[int, int], Dict[int, int]]:
    result = {}
    _result = {}
    ex = 1
    for i in range((1 << (n - k)) - 1):
        sx = xor_div(ex, gx)
        result[sx] = ex
        print("{:0>3b} - {:0>7b}".format(sx, ex))
        ex <<= 1

    for i in range(2 ** k):
        vx = (i << (n - k)) + xor_div(i << (n - k), gx)
        _result[vx] = i

    return result, _result


class Coder:
    def __init__(self, n: int = 7, k: int = 4, gx: int = int("1011", 2)):
        self.N = n
        self.K = k
        self.GX = gx
        self.ERR, self.CHECKS = calc_err_map(n, k, gx)

    def encode(self, mx: int) -> str:
        p0 = xor_div(mx << (self.N - self.K), self.GX)
        vx = (mx << (self.N - self.K)) + p0
        return "{:0>7b}".format(vx)

    def decode(self, vx: int) -> Tuple[str, bool]:
        """
       Function trying decode encoded sequence.
       If error was been found, it returns true and trying to recover value.

       :param vx: Encoded value (e.x. 1000101).
       :returns: Tuple of two values. First - decoded number sequence (e.x. 101). Second - if error was been found.
       """
        rem = xor_div(vx, self.GX)
        try:
            ex = self.ERR[rem]
            if xor_div(vx ^ ex, self.GX) == 0:
                return "{:0>4b}".format(self.CHECKS[vx ^ ex]), True
            return "", True
        except KeyError:
            return "{:0>4b}".format(self.CHECKS[vx]), False


def split(s: str, chunk_size: int = 4):
    chunks = len(s)
    return [int(s[i:i + chunk_size], 2) for i in range(0, chunks, chunk_size)]


def main():
    coder = Coder()
    test_str = "Привет, мой дорогой друг. Я пришел тебе сказать, что я тебе очень рад."
    res = ''.join("{:0>16b}".format(ord(i)) for i in test_str)
    encoded = ''.join([coder.encode(x) for x in split(res)])
    decoded = ''.join([coder.decode(x)[0] for x in split(encoded, 7)])

    for i in range(16):
        enc = coder.encode(i)
        dec = coder.decode(int(enc, 2))
        errored = 0
        if random() < 0.2:
            errored = int(enc, 2) ^ 1 << (int(random() * 7))
            dec = coder.decode(errored)
        print("{:2d}".format(i), "{:0>4b}".format(i), enc, "error: {:0>7b}".format(errored), dec)

    print("Message: {}".format(test_str))
    print("Bytes: {}".format(split(res)))
    print("Bits: {}".format(res))
    print("Encoded: {}".format(encoded))
    print("Decoded: {}".format(decoded))
    print("Decoded Message: {}".format(''.join([chr(x) for x in split(decoded, 16)])))


if __name__ == '__main__':
    main()

# 001 - 0000001
# 010 - 0000010
# 100 - 0000100
# 011 - 0001000
# 110 - 0010000
# 111 - 0100000
# 101 - 1000000
#  0 0000 0000000 error: 0000000 ('0000', False)
#  1 0001 0001011 error: 0000000 ('0001', False)
#  2 0010 0010110 error: 0000000 ('0010', False)
#  3 0011 0011101 error: 0000000 ('0011', False)
#  4 0100 0100111 error: 0000000 ('0100', False)
#  5 0101 0101100 error: 0000000 ('0101', False)
#  6 0110 0110001 error: 0110000 ('0110', True)
#  7 0111 0111010 error: 0011010 ('0111', True)
#  8 1000 1000101 error: 0000000 ('1000', False)
#  9 1001 1001110 error: 0000000 ('1001', False)
# 10 1010 1010011 error: 0000000 ('1010', False)
# 11 1011 1011000 error: 0000000 ('1011', False)
# 12 1100 1100010 error: 0000000 ('1100', False)
# 13 1101 1101001 error: 0000000 ('1101', False)
# 14 1110 1110100 error: 0000000 ('1110', False)
# 15 1111 1111111 error: 0000000 ('1111', False)
# Message: Привет, мой дорогой друг. Я пришел тебе сказать, что я тебе очень рад.
# Bytes: [0, 4, 1, 15, 0, 4, 4, 0, 0, 4, 3, 8, 0, 4, 3, 2, 0, 4, 3, 5, 0, 4, 4, 2, 0, 0, 2, 12, 0, 0, 2, 0, 0, 4, 3, 12, 0, 4, 3, 14, 0, 4, 3, 9, 0, 0, 2, 0, 0, 4, 3, 4, 0, 4, 3, 14, 0, 4, 4, 0, 0, 4, 3, 14, 0, 4, 3, 3, 0, 4, 3, 14, 0, 4, 3, 9, 0, 0, 2, 0, 0, 4, 3, 4, 0, 4, 4, 0, 0, 4, 4, 3, 0, 4, 3, 3, 0, 0, 2, 14, 0, 0, 2, 0, 0, 4, 2, 15, 0, 0, 2, 0, 0, 4, 3, 15, 0, 4, 4, 0, 0, 4, 3, 8, 0, 4, 4, 8, 0, 4, 3, 5, 0, 4, 3, 11, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 5, 0, 4, 3, 1, 0, 4, 3, 5, 0, 0, 2, 0, 0, 4, 4, 1, 0, 4, 3, 10, 0, 4, 3, 0, 0, 4, 3, 7, 0, 4, 3, 0, 0, 4, 4, 2, 0, 4, 4, 12, 0, 0, 2, 12, 0, 0, 2, 0, 0, 4, 4, 7, 0, 4, 4, 2, 0, 4, 3, 14, 0, 0, 2, 0, 0, 4, 4, 15, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 5, 0, 4, 3, 1, 0, 4, 3, 5, 0, 0, 2, 0, 0, 4, 3, 14, 0, 4, 4, 7, 0, 4, 3, 5, 0, 4, 3, 13, 0, 4, 4, 12, 0, 0, 2, 0, 0, 4, 4, 0, 0, 4, 3, 0, 0, 4, 3, 4, 0, 0, 2, 14]
# Bits
# Encoded
# Decoded
# Decoded Message: Привет, мой дорогой друг. Я пришел тебе сказать, что я тебе очень рад.